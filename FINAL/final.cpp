#include <iostream>
#include <string>
#include <vector>
#include "utils.h" // 메뉴와 current_year() 함수가 제공됩니다.

// 목표 : 사원 관리 프로그램
// 아래 People 을 완성해서 이용해 주세요
// => 이름, 사번, 태어난년도, 입사년도로 관리
// => 태어난 년도로 보관하지만 화면 출력시에는 나이로 출력( current_year() - 태어난년도 )
// => 멤버데이타는 public 에 놓고 작성해 주세요

struct People 
{
	std::string name;
	std::string id;
	int year1;	// 나이 계산을 위한 태어난 년도. 
	int year2;	// 입사년도

	// 평가 #1. People 생성자 만들어서 위 4개 정보 초기화 해주세요.
	// => 유효성 검사 없어도 됩니다.


	// 평가 #2. 아래 print 완성해 주세요
	void print() const 
	{
		// 홍길동1(사번, 나이, 입사년도)
		// => 태어난 연도를 가지고 나이를 계산해 주세요( current_year() - year1 로계산)
	}
};

// 테스트를 위해 초기에 3명을 넣어 놓고 시작
std::vector<People*> v = { new People{"홍길동1", "11111", 2004, 2024},
						   new People{"홍길동2", "33333", 1980, 2007},
						   new People{"홍길동3", "22222", 1970, 1999} };

int main()
{
	// #3. 아래와 같이 메뉴를 구성하고, 기능도 구현하세요
	// 1. 모든 사원 보기(PopupMenu)
	//    1-1. 기본 사원 보기 - v 에 있는 모든 요소를 출력 		
	//    1-2. [심화] 이름순으로 출력 ( 이름 순으로 정렬후 출력)		
	//    1-3. [심화] 입사년도 순으로 출력 ( 입사년도로 정렬후 출력)

	// 2. 사원 추가(MenuItem)
	// => 이름, 사번, 태어난년도, 입사년도를 입력 받아서 v People 객체 생성후 v 추가
	// => [심화] ID 는 고유값이 어야 합니다. 동일한 ID 가 있으면 다시 입력 받게 해보세요

	// 3. 사원 검색(PopupMenu)
	//    3-1. ID 로 검색후 - 세부 정보 출력해 주세요.
	//    3-2. [심화] 이름으로 검색. 부분적으로 일치하는 것도 확인 - "길동" 입력시, 이름에 "길동"이 포함된 모든 사람 출력

	//    3-3. [심화 ] 조건 검색
	//         3-3-1. 입사 10년차 이상인 모든 사원 출력
	//         3-3-2. 나이가 50 이상인 모든 사원 출력검색

	// 4. [심화] 사원 제거 (MenuIem)
	//	  => "제거할 사람의 이름 또는 사번을 입력하세요 >> "
	//    => "std::cin >> value" 처럼 한번만 입력 받고
	//    => 이름 또는 사번이 value 인 모든 사람을 보여주고..
	//    => 어떤 사람을 삭제할지 선택하게 한후 선택된 사람을 삭제.

	// 평가는 "4번까지 입니다."
	// 복습 하실때 아래 기능도 구현해 보세요
	// 5. 사원 정보 수정
	// 6. 입사년도만 관리하지 말고, Date 를 사용해서 "년,월,일" 을 모두 관리하면서
	// 7. 이번달에 생일이 있는 사람을 출력하는 기능
	// 8. v 에 있는 모든 데이타를 "파일에 저장/복구" 하는 기능등..
	// 9. People 의 각 멤버를 private 에 놓고, 유효성을 확인하는 코드도 추가해 보세요

	// 틈틈히 C/C++ 을 복습하시면서, 완벽한 프로그램으로 발전 시켜 보세요
}