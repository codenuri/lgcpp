// 정리.cpp
// 객체지향 프로그래밍이란 ?

// => 프로그램에서 필요한 타입을 먼저 만들고
// => 만든 타입을 가지고 프로그램을 작성하자는 것

// 장점
// => std::string, std::vector 가 있기 때문에
// => 프로그램을 작성하기가 훨씬 편리합니다.
// C++ : std::string name = "kim";
// C   : char name[32];
//       strcpy(name, "kim");
//=====================================================
// 객체지향 프로그램에서 배워야 하는 것
// (C++, Java, C#, Python, Swift 등의 언어를 통해서 배워야 하는 것)


// 1. 타입을 만들때 필요한 문법들 (class 문법)

// (1) private, public 의미, 왜 사용하는가 ?

// (2) 생성자, 소멸자 개념. 문법들(사용자가 만들지 않으면 컴파일러가 제공)

// (3) 생성자에서 멤버데이타를 초기화 할때는 "멤버 초기화 리스트" 를 사용하자
//     => C++ 만의 특징, 다른 언어는 이런 문법 없음.

// (4) this 라는 키워드의 의미 - this 자체는 많이 활용되지 않지만
//    => 멤버 함수의 호출원리이기 때문에 중요
//    => 모든 객체지향 언어의 공통의 특징이므로 중요

// (5) static 멤버 => 모든 객체지향 언어의 공통적인 개념 - 아주 중요

// (6) const 멤버 함수 => C++ 만의 특징. 다른 언어에는 없는 개념


// 2. 이미 만들어진 타입(라이브러리)를 사용하는 방법
// => std::vector 사용법
// => std::string 사용법
